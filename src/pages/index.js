import Image from "next/image";
import { Inter } from "next/font/google";
import { Canvas } from "@react-three/fiber";
import css from "../styles/home.module.css";
import Floor from "@/components/Floor";
import LightBulb from "@/components/LightBulb";
import OrbitControls from "@/components/OrbitControls";
import Draggable from "@/components/Draggable";
import { Light } from "three";
import { Suspense, useEffect, useState } from "react";
import RotatingFigures from "@/components/RotatingFigures";
import { Box, Cone, Cylinder, Sphere, Torus } from "@react-three/drei";

const inter = Inter({ subsets: ["latin"] });

const figures = [Box, Sphere, Cylinder, Cone, Torus];
const figuresData = [
  {
    name: "Box",
    description: "A box is a three-dimensional object with six flat sides and",
  },
  {
    name: "Sphere",
    description:
      "A sphere is a perfectly round geometrical object in three-dimensional space that is the surface of a completely round ball.",
  },
  {
    name: "Cylinder",
    description:
      "A cylinder is a three-dimensional solid shape that has two parallel circular bases connected by a curved surface, which is also called a lateral surface.",
  },
  {
    name: "Cone",
    description:
      "A cone is a three-dimensional geometric shape that tapers smoothly from a flat base to a point called the apex or vertex.",
  },
  {
    name: "Torus",
    description:
      "A torus is a surface of revolution generated by revolving a circle in three-dimensional space about an axis that passes through the center of the circle.",
  },
];

export default function Home() {
  const [rotatingValue, setRotatingValue] = useState(0.01);
  const [indexFigures, setIndexFigures] = useState(0);
  const [actualFigure, setActualFigure] = useState(figures[indexFigures]);

  useEffect(() => {
    window.addEventListener("deviceorientation", (event) => {
      if (event.gamma > 10) {
        setIndexFigures((indexFigures + 1) % figures.length);
        setActualFigure(figures[indexFigures]);
      }
      if (event.gamma < -10) {
        setIndexFigures((indexFigures - 1) % figures.length);
        setActualFigure(figures[indexFigures]);
      }
    });
  }, []);

  return (
    <div className="flex flex-col justify-between h-screen items-center bg-black py-10">
      <button
        onClick={() => {
          setIndexFigures((indexFigures + 1) % figures.length);
          setActualFigure(figures[indexFigures]);
        }}
        className="text-white"
      >
        Rotate
      </button>
      <div className={css.scene}>
        <Canvas
          shadows
          className={css.canvas}
          camera={{
            position: [0, 2, 4],
          }}
        >
          <ambientLight color={"white"} intensity={0.2} />
          <LightBulb position={[-10, 10, -10]} />
          <OrbitControls />
          <Suspense fallback={null}>
            <RotatingFigures
              position={[0, 0, 0]}
              rotatingValue={rotatingValue}
              FigureData={actualFigure}
            />
          </Suspense>
        </Canvas>
      </div>
    </div>
  );
}
